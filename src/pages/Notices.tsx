import Layout from "@/components/layout/Layout";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Calendar, ChevronRight } from "lucide-react";
import { useState } from "react";
import { Button } from "@/components/ui/button";

interface Notice {
  id: number;
  title: string;
  date: string;
  category: "ржЬрж░рзБрж░рж┐" | "рж╕рж╛ржзрж╛рж░ржг" | "ржЗржнрзЗржирзНржЯ" | "ржШрзЛрж╖ржгрж╛" | "ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг";
  content: string;
  isImportant: boolean;
}

const Notices = () => {
  const [selectedNotice, setSelectedNotice] = useState<Notice | null>(null);

  const notices: Notice[] = [
    {
      id: 1,
      title: "рж░ржХрзНрждрзЗрж░ рж╕ржВржХржЯ",
      date: "рзирзжрзирзк-рзжрзз-рзирзи",
      category: "ржЬрж░рзБрж░рж┐",
      isImportant: true,
      content: "ржмрж░рзНрждржорж╛ржирзЗ ржЖржорж░рж╛ рж░ржХрзНрждрзЗрж░ ржЧрзБрж░рзБрждрж░ рж╕ржВржХржЯрзЗ ржЖржЫрж┐ред рж░ржХрзНрждржжрж╛рждрж╛ржжрзЗрж░ ржЕржмрж┐рж▓ржорзНржмрзЗ ржкрзНрж░ржпрж╝рзЛржЬржиред ржЖржкржирж┐ ржпржжрж┐ рж░ржХрзНрждржжрж╛ржирзЗрж░ ржЬржирзНржп ржЙржкржпрзБржХрзНржд рж╣ржи рждржмрзЗ ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ ржпрзЗ ржХрзЛржи ржжрж╛ржи ржХрзЗржирзНржжрзНрж░рзЗ ржпржд ржжрзНрж░рзБржд рж╕ржорзНржнржм ржЖрж╕рзБржиред"
    },
    {
      id: 2,
      title: "ржЖрж░рзЛ рж╕рзНржмрзЗржЪрзНржЫрж╛рж╕рзЗржмржХ ржкрзНрж░ржпрж╝рзЛржЬржи",
      date: "рзирзжрзирзк-рзжрзз-рзирзж",
      category: "ржШрзЛрж╖ржгрж╛",
      isImportant: false,
      content: "ржПржЗ ржорж┐рж╢ржирзЗ ржХрж╛ржЬ ржХрж░рждрзЗ ржЖрж░ржУ ржмрзЗрж╢рж┐ рж╕рзНржмрзЗржЪрзНржЫрж╛рж╕рзЗржмржХ ржПрж░ ржкрзНрж░ржпрж╝рзЛржЬржиред ржпрж╛рж░рж╛ ржЖржЧрзНрж░рж╣рзА ржЖржЫрзЗржи рждрж╛рж░рж╛ ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи ржзржирзНржпржмрж╛ржжред"
    },
    {
      id: 3,
      title: "ржорж╛рж╕рж┐ржХ ржорж┐ржЯрж┐ржВржпрж╝рзЗ ржЙржкрж╕рзНржерж┐ржд рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп ржЕржирзБрж░рзЛржз",
      date: "рзирзжрзирзк-рзжрзз-рззрзо",
      category: "ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг",
      isImportant: true,
      content: "рж╕рзНржмрзЗржЪрзНржЫрж╛рж╕рзЗржмржХржЧржг ржЖржкржирж╛ржжрзЗрж░ ржЬржирзНржп ржкрзНрж░рждрж┐ ржорж╛рж╕рзЗ ржпрзЗ ржорж╛рж╕рж┐ржХ ржорж┐ржЯрж┐ржВ ржПрж░ ржмрзНржпржмрж╕рзНржерж╛ ржХрж░рж╛ рж╣ржпрж╝ рждрж╛рждрзЗ ржжржпрж╝рж╛ ржХрж░рзЗ ржЙржкрж╕рзНржерж┐ржд ржерж╛ржХржмрзЗржи ржПржмржВ ржорж╛рж╕рж┐ржХ ржнрж╛рждрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░ржмрзЗржи"
    },
    {
      id: 4,
      title: "ржЖржорж╛ржжрзЗрж░ ржжрж╛рждрж╛ржжрзЗрж░ ржзржирзНржпржмрж╛ржж",
      date: "рзирзжрзирзк-рзжрзз-рззрзл",
      category: "ржШрзЛрж╖ржгрж╛",
      isImportant: false,
      content: "ржЖржорж╛ржжрзЗрж░ ржмрж╕ржирзНрждржХрж╛рж▓рзАржи рж░ржХрзНрждржжрж╛ржи рж╢рж┐ржмрж┐рж░рзЗ ржЕржВрж╢ржЧрзНрж░рж╣ржгржХрж╛рж░рзА рж╕ржХрж▓ ржжрж╛рждрж╛ржжрзЗрж░ ржЖржирзНрждрж░рж┐ржХ ржзржирзНржпржмрж╛ржж ржЬрж╛ржирж╛рждрзЗ ржЪрж╛ржЗред"
    }
  ];

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "ржЬрж░рзБрж░рж┐":
        return "bg-red-100 text-red-800 border-red-200";
      case "ржЗржнрзЗржирзНржЯ":
        return "bg-blue-100 text-blue-800 border-blue-200";
      case "ржШрзЛрж╖ржгрж╛":
        return "bg-green-100 text-green-800 border-green-200";
      case "ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг":
        return "bg-yellow-100 text-yellow-800 border-yellow-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  if (selectedNotice) {
    return (
      <Layout title="ржирзЛржЯрж┐рж╢ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд">
        <div className="px-4">
          <Button
            variant="ghost"
            onClick={() => setSelectedNotice(null)}
            className="mb-4 text-primary"
          >
            тЖР ржкрж┐ржЫржирзЗ ржпрж╛ржи
          </Button>
          
          <Card>
            <CardContent className="p-6">
              <div className="mb-4">
                <Badge className={getCategoryColor(selectedNotice.category)}>
                  {selectedNotice.category}
                </Badge>
                {selectedNotice.isImportant && (
                  <Badge className="ml-2 bg-yellow-100 text-yellow-800 border-yellow-200">
                    ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг
                  </Badge>
                )}
              </div>
              
              <h1 className="text-xl font-bold font-bengali mb-3 text-foreground">
                {selectedNotice.title}
              </h1>
              
              <div className="flex items-center gap-2 mb-4 text-muted-foreground">
                <Calendar className="h-4 w-4" />
                <span className="text-sm font-bengali">{selectedNotice.date}</span>
              </div>
              
              <div className="prose prose-sm font-bengali text-foreground">
                <p className="leading-relaxed">{selectedNotice.content}</p>
              </div>
              
              {selectedNotice.category === "ржЬрж░рзБрж░рж┐" && (
                <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-red-800 font-bengali font-semibold text-center">
                    ЁЯЖШ ржЬрж░рзБрж░рж┐ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп: рзжрззрзнрзирзирзлрзирзорззрзмрзк
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </Layout>
    );
  }

  return (
    <Layout title="ржирзЛржЯрж┐рж╢ ржмрзЛрж░рзНржб">
      <div className="px-4 space-y-4">
        {notices.map((notice) => (
          <Card 
            key={notice.id} 
            className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${
              notice.isImportant ? 'border-l-4 border-l-primary' : ''
            }`}
            onClick={() => setSelectedNotice(notice)}
          >
            <CardContent className="p-4">
              <div className="flex items-start justify-between mb-2">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <Badge className={getCategoryColor(notice.category)}>
                      {notice.category}
                    </Badge>
                    {notice.isImportant && (
                      <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">
                        ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг
                      </Badge>
                    )}
                  </div>
                  
                  <h3 className="font-semibold font-bengali text-lg leading-tight text-foreground">
                    {notice.title}
                  </h3>
                  
                  <div className="flex items-center gap-2 mt-2 text-muted-foreground">
                    <Calendar className="h-4 w-4" />
                    <span className="text-sm font-bengali">{notice.date}</span>
                  </div>
                </div>
                
                <ChevronRight className="h-5 w-5 text-muted-foreground" />
              </div>
              
              <p className="text-muted-foreground font-bengali text-sm line-clamp-2">
                {notice.content.substring(0, 100)}...
              </p>
            </CardContent>
          </Card>
        ))}
        
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <p className="text-blue-800 font-bengali text-center font-semibold">
            ЁЯУв рж╕ржм ржирзЛржЯрж┐рж╢ ржЖржорж╛ржжрзЗрж░ ржлрзЗрж╕ржмрзБржХ ржЧрзНрж░рзБржкрзЗржУ ржкрж╛ржмрзЗржи
          </p>
          <p className="text-blue-700 font-bengali text-center text-sm mt-1">
            ржжрзНрж░рзБржд ржЖржкржбрзЗржЯ ржкрзЗрждрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи
          </p>
        </div>
      </div>
    </Layout>
  );
};

export default Notices;